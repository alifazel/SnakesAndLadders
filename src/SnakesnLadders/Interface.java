package SnakesnLadders;

import java.awt.*;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/**
 * The Interface class implements the main user interface of the program. 
 * 
 * @author Animesh Mishra & Ali Fazel
 */
public class Interface extends javax.swing.JFrame {

    private static final int ServerPORT = 3000 ;
    public static Player[] thePlayers = new Player[5];	
    public static int noOfPlayers = 0;
    
    
   /**
    * Checks if the game is over
    *
    *@param	thePlayers[]	The players array
    *@param	playerCount 	The total number of players
    *@return				true or false depending on the game status
    */ 
    private static boolean isGameOver(Player[] thePlayers, int playerCount) {
        int flag = 0 ;
        
        for (int i = 0 ; i < playerCount ; i++) {
            if(thePlayers[i].getPosition() == 100)
                flag = 1 ;
        }
        
        if(flag == 0) return false ;
        else return true ;
    }
    
    public Interface() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CreateServer = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        ipAddress = new javax.swing.JTextField();
        ConnectServer = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        RollDie = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        GameStatus = new javax.swing.JTextArea();
        BoardPane = new BoardPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Snakes & Ladders");
        setResizable(false);

        CreateServer.setText("Host a game");
        CreateServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateServerActionPerformed(evt);
            }
        });

        ipAddress.setText("Enter host's address");

        ConnectServer.setText("Connect");
        ConnectServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectServerActionPerformed(evt);
            }
        });

        RollDie.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        RollDie.setText("Roll !");
        RollDie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RollDieActionPerformed(evt);
            }
        });

        GameStatus.setColumns(20);
        GameStatus.setLineWrap(true);
        GameStatus.setRows(5);
        GameStatus.setWrapStyleWord(true);
        GameStatus.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Status", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jScrollPane2.setViewportView(GameStatus);

        org.jdesktop.layout.GroupLayout BoardPaneLayout = new org.jdesktop.layout.GroupLayout(BoardPane);
        BoardPane.setLayout(BoardPaneLayout);
        BoardPaneLayout.setHorizontalGroup(
            BoardPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 666, Short.MAX_VALUE)
        );
        BoardPaneLayout.setVerticalGroup(
            BoardPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(BoardPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(jSeparator2)
                                .addContainerGap())
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, ConnectServer, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(CreateServer, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, ipAddress))
                                .add(15, 15, 15))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(RollDie, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 232, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 224, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(12, Short.MAX_VALUE))))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 178, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(42, 42, 42))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(16, 16, 16)
                .add(CreateServer, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 51, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ipAddress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ConnectServer, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 173, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 192, Short.MAX_VALUE)
                .add(RollDie, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(10, 10, 10))
            .add(BoardPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RollDieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RollDieActionPerformed
        while(!isGameOver(Interface.thePlayers, noOfPlayers)) {
            for (int i = 0 ; i < noOfPlayers ; i++) {
                int newPosition = Interface.thePlayers[i].getPosition() + Interface.thePlayers[i].throwDie() ;	
                if(newPosition > 100) continue ;
                else Interface.thePlayers[i].setPosition(newPosition) ;
            }
        }
    }//GEN-LAST:event_RollDieActionPerformed

    private void CreateServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateServerActionPerformed
        try {
            Server hostServer = new Server(ServerPORT) ;
            hostServer.startServer() ;
            java.net.InetAddress i = java.net.InetAddress.getLocalHost();
            String localHost = i.getHostAddress() ;
            GameStatus.setText("Server successfully started. \nIP address " + localHost + "\nWaiting for other players ...") ;
            noOfPlayers = 1 ;
            thePlayers[noOfPlayers-1] = Player.InitializePlayer(noOfPlayers, localHost) ;      
            CreateServer.setEnabled(false) ;
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CreateServerActionPerformed

    private void ConnectServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectServerActionPerformed
        try {
            noOfPlayers++ ;
            if(noOfPlayers < 5) {
                thePlayers[noOfPlayers-1] = Player.InitializePlayer(noOfPlayers, ipAddress.getText()) ;
                GameStatus.setText(thePlayers[noOfPlayers-1].getName() + " connected!") ;
            }
            if(noOfPlayers == 5) {
                thePlayers[noOfPlayers-1] = Player.InitializePlayer(noOfPlayers, ipAddress.getText()) ;
                GameStatus.setText(thePlayers[noOfPlayers-1].getName() + " connected!") ;
                ConnectServer.setEnabled(false) ;
            }
        } catch (UnknownHostException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ConnectServerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        
        for (int i = 0 ; i < 5 ; i++) {
            thePlayers[i] = new Player(i+1, null, ServerPORT);
        } //Initializing the Players instance array
        
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BoardPane;
    private javax.swing.JButton ConnectServer;
    private javax.swing.JButton CreateServer;
    private javax.swing.JTextArea GameStatus;
    private javax.swing.JButton RollDie;
    private javax.swing.JTextField ipAddress;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables
}

